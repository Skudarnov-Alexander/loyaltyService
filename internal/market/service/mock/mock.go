// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/Skudarnov-Alexander/loyaltyService/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMarketService is a mock of MarketService interface.
type MockMarketService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketServiceMockRecorder
}

// MockMarketServiceMockRecorder is the mock recorder for MockMarketService.
type MockMarketServiceMockRecorder struct {
	mock *MockMarketService
}

// NewMockMarketService creates a new mock instance.
func NewMockMarketService(ctrl *gomock.Controller) *MockMarketService {
	mock := &MockMarketService{ctrl: ctrl}
	mock.recorder = &MockMarketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketService) EXPECT() *MockMarketServiceMockRecorder {
	return m.recorder
}

// CheckOrder mocks base method.
func (m *MockMarketService) CheckOrder(ctx context.Context, userID, orderID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrder", ctx, userID, orderID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrder indicates an expected call of CheckOrder.
func (mr *MockMarketServiceMockRecorder) CheckOrder(ctx, userID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrder", reflect.TypeOf((*MockMarketService)(nil).CheckOrder), ctx, userID, orderID)
}

// FetchBalance mocks base method.
func (m *MockMarketService) FetchBalance(ctx context.Context, userID string) (model.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBalance", ctx, userID)
	ret0, _ := ret[0].(model.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBalance indicates an expected call of FetchBalance.
func (mr *MockMarketServiceMockRecorder) FetchBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBalance", reflect.TypeOf((*MockMarketService)(nil).FetchBalance), ctx, userID)
}

// FetchOrders mocks base method.
func (m *MockMarketService) FetchOrders(ctx context.Context, userID string) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOrders", ctx, userID)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrders indicates an expected call of FetchOrders.
func (mr *MockMarketServiceMockRecorder) FetchOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrders", reflect.TypeOf((*MockMarketService)(nil).FetchOrders), ctx, userID)
}

// FetchWithdrawals mocks base method.
func (m *MockMarketService) FetchWithdrawals(ctx context.Context, userID string) ([]model.Withdrawn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]model.Withdrawn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWithdrawals indicates an expected call of FetchWithdrawals.
func (mr *MockMarketServiceMockRecorder) FetchWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWithdrawals", reflect.TypeOf((*MockMarketService)(nil).FetchWithdrawals), ctx, userID)
}

// MakeWithdrawal mocks base method.
func (m *MockMarketService) MakeWithdrawal(ctx context.Context, userID string, w model.Withdrawn) (model.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeWithdrawal", ctx, userID, w)
	ret0, _ := ret[0].(model.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeWithdrawal indicates an expected call of MakeWithdrawal.
func (mr *MockMarketServiceMockRecorder) MakeWithdrawal(ctx, userID, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeWithdrawal", reflect.TypeOf((*MockMarketService)(nil).MakeWithdrawal), ctx, userID, w)
}

// SaveOrder mocks base method.
func (m *MockMarketService) SaveOrder(ctx context.Context, userID, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, userID, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockMarketServiceMockRecorder) SaveOrder(ctx, userID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockMarketService)(nil).SaveOrder), ctx, userID, orderID)
}

// MockAccrualService is a mock of AccrualService interface.
type MockAccrualService struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualServiceMockRecorder
}

// MockAccrualServiceMockRecorder is the mock recorder for MockAccrualService.
type MockAccrualServiceMockRecorder struct {
	mock *MockAccrualService
}

// NewMockAccrualService creates a new mock instance.
func NewMockAccrualService(ctrl *gomock.Controller) *MockAccrualService {
	mock := &MockAccrualService{ctrl: ctrl}
	mock.recorder = &MockAccrualServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualService) EXPECT() *MockAccrualServiceMockRecorder {
	return m.recorder
}

// FetchAccrualStatus mocks base method.
func (m *MockAccrualService) FetchAccrualStatus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccrualStatus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchAccrualStatus indicates an expected call of FetchAccrualStatus.
func (mr *MockAccrualServiceMockRecorder) FetchAccrualStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccrualStatus", reflect.TypeOf((*MockAccrualService)(nil).FetchAccrualStatus), ctx)
}
